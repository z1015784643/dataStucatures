'''
重点：二叉树的前序，中序，后序遍历
力扣：144题，94题，145题

一、树的相关概念：
    节点：节点是树的基本部分，也可以叫做‘键’，节点可以由附加信息，这个附加信息叫做‘有效载荷’。
    边：边是树的另一个基本部分，边连接两个节点以显示他们之间存在关系，每个节点（除了根之外），都恰好从另一个节点传入连接。每个节点可以具有多个输出边。
    根：树的根，是树中唯一没有传入边的节点。
    路径：路径是由边连接节点的有序列表
    子节点：具有来自相同传入边的节点C的集合成为该节点的子节点
    父节点：具有和它相同传入边的所有连接的节点为父节点
    兄弟：树中作为同一父节点的节点被称为兄弟节点
    子树：子树数父节点和该节点的所有后代组成的一组节点和边
    叶节点：叶节点是没有子节点的节点
    层数：节点n的层数为从根节点到该节点所经过的分支数目
    高度：树的高度等于树中任何节点的最大层数。

二、树的定义：
    定义一：树是由一组节点和一组连接节点的变组成。
        树的一个节点被指定为根节点
        除了根节点之外，每个节点n通过一个其他节点p的边连接，其中p是n的父节点。
        从根路径遍历到每个节点路径是唯一的
        如果树中每个节点最多有两个子节点，我们说该树是一个“！二叉树！”
    定义二：（树的递归定义）
        树是空的，或者说由一个根节点和零个或者多个子树组成，每个子树也是一棵树，每个子树的节点通过边连接到父树的根节点

三、树的表示
    1.列表表示
    2.节点表示：（抽象ADT）：使用节点和引用，定义一个具有根植属性的类和左子树，右子树。

'''

class BinaryTree:
    def __init__(self,rootObj):
        self.key = rootObj
        self.leftChild = None
        self.rightChild = None
    def insertLift(self,newNode):
        if self.leftChild == None:
            self.leftChild = BinaryTree(newNode)
        else:
            temp = BinaryTree(newNode)
            temp.leftChild = self.leftChild
            self.leftChild = temp












